(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{308:function(e,v,s){"use strict";s.r(v);var t=s(14),u=Object(t.a)({},(function(){var e=this,v=e._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"前言"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),v("p",[e._v("  本文档是基于"),v("code",[e._v("vue@2.6.14")]),e._v("版本源码分析，本文参考大量网络文献和大神的分析，如有雷同，绝非巧合。撰写本文目的是为了学习，这是一篇个人学习文档，并不用做任何商业用途。")]),e._v(" "),v("p",[e._v("  为什么要学习源码？我们学语文时候学会了字为什么还要学词组，学会了词组为什么还要学文章。js同样作为一门语言我认为与中文没什么不同，我们读js代码只是把浏览器能理解的语言翻译成我们能理解的语言(比如中文)。了解原理和能运用是两回事，我们学会文字和词组，并且非常了解它们的意思，但是不代表你可以写一篇优美的文章。vue源码作为知名js框架无疑就像一篇优美的文章，读源码难道不是最好的学习js方式吗？它不仅可以让我们学到js的运用，还能学到许多我们没有见过的js知识。正如语文一样我们平常生活聊天用到的词语是非常少的，而写文章时我们会用到很多平常不用的词汇、语法。vue源码中也有许多我们工作中接触不到的js供我们学习参考，往大了说学习它是对我前端知识体系的一个完善，使我们对js理解更深刻；往小了说可以让我们对vue了解更深入，写出更优雅的vue代码。")]),e._v(" "),v("p",[e._v("  看源码时我听到很多声音：看源码有什么用呢？会用vue就行了，你又不能写一个源码出来。在这种声音中我砥砺前行，我不仅看源码我还要写文档，记录自己的学习过程和学习心得，因为我知道这会是一个漫长的过程，如果我不去记录下来我可能看一部分忘一部分。因为我切实感受到读源码带来的好处，所以我从来不理会那些声音，在读源码前遇到报错我的选择是百度或者根据经验解决，读源码后我写代码时下意识的在脑海走一遍代码执行过程，极少出现vue规则外的复杂bug，一般只会遇到一些笔误错误。也不会有滥用api情况出现，比如无脑用"),v("code",[e._v("nextTick")]),e._v("或者获取不到"),v("code",[e._v("ref")]),e._v("报错后才用。除此之外还有许多好处，就不一一列举了。")]),e._v(" "),v("p",[e._v("  我只是一个普普通通的码农，这并不代表我们就学不懂vue源码，也许天才可以很快读懂，但我们也可以靠时间积累去慢慢理解。我只是一个普通人，我写这篇文档只是为了学习，而不是为了教学，当然我也愿意分享给其他乐于学习的vue的人，因为学习过程我深切感受到入门是非常难的，希望这篇文档可以带你度过最艰难的入门期。本文是以第一视角去撰写的，而不是上帝视角，也就是说我写文档过程就是我学习的过程，所以本文档是非常局限性的，尤其是在初期不了解整个框架过程时很多分析可能都有误，如果你能告知我来改正，我将不胜感激。这也反应出我入门确实是艰难的，在后面的我的分析会变得更加严谨，这是我作为一个普通人正常的学习过程，但也可能无法避免一些错误，甚至会有许多笔误，因为我真的很普通，我做不到尽善尽美，甚至做不到少的错误率，深切希望读者能够指出我的错误让我有机会改正。")]),e._v(" "),v("p",[e._v("  最后，作为理科出身的我文学素养实在不高，文档语言组织比较差，而且本人能力有限，文档会有许多分析错误和笔误，请不喜勿喷。")]),e._v(" "),v("p",[e._v("  Thank you for reading, best wishes for you.")])])}),[],!1,null,null,null);v.default=u.exports}}]);